#==================================================
#| #Quest.sk
#| クエストの実装モジュール
#|
#| Nekozouneko Group Developer
#==================================================

#enum guiType {
# QUEST_MAIN,
#}

#enum questType {
# 1, (Daily)
# 2, (Weekly)
#}

Options:
    MAIN_TITLE_NAME: "&6&lクエスト &8マイクエストを見る"
    MAIN_BACKGROUND_ICON: gray stained glass pane named "&r"

    MAIN_INFO_ICON: book named "&aクエストとは？" with lore "&7ここでクエストを受注して達成すると、", "&7クエストに応じて報酬をもらうことができます。", "&f現在は、デイリークエストのみ" and "&f受注することができます。"
    MAIN_DAILY_INFO_ICON: trial key named "&6デイリークエスト" with lore "&7毎日0:00（日本標準時）に" and "&7更新されるクエストです。（最大10個）"
    MAIN_WEEKLY_INFO_ICON: ominous trial key named "&6ウィークリークエスト" with lore "&7毎週月曜日0:00（日本標準時）に" and "&7更新されるクエストです。（最大5個）"

function questPeriodicCheckHandlerInit():
    set {_checkInterval} to getDefine("QUEST_CHECK_INTERVAL")
    async run 0 ticks later repeating every {_checkInterval}:
        #Periodic Handler
        questCompleteCheckHandler_SavingMoney()

function questGuiHandle(p: player):
    openGui({_p}, "QUEST_MAIN")

local function openGui(p: player, guiType: string):
    #QUEST_MAIN
    if {_guiType} is "QUEST_MAIN":
        open chest inventory with 6 row named {@MAIN_TITLE_NAME} to {_p}
        
        #Draw Frames
        loop 6 * 9 times:
            set slot (loop-number - 1) of {_p}'s current inventory to {@MAIN_BACKGROUND_ICON}
        
        #Draw Icons
        set slot 4 of {_p}'s current inventory to {@MAIN_INFO_ICON}

        set slot 10 of {_p}'s current inventory to {@MAIN_DAILY_INFO_ICON}
        set slot 16 of {_p}'s current inventory to {@MAIN_DAILY_INFO_ICON}

        set slot 37 of {_p}'s current inventory to {@MAIN_WEEKLY_INFO_ICON}
        set slot 43 of {_p}'s current inventory to {@MAIN_WEEKLY_INFO_ICON}

        #Rendering Quests
        renderQuests({_p})

function onInventoryClickQuestHandle(p: player, item: itemtype) :: boolean:
    set {_invName} to name of {_p}'s current inventory

    #QUEST_MAIN
    if {_invName} is {@MAIN_TITLE_NAME}:
        set {_questId} to getQuestIdFromItem({_item})
        return true if {_questId} is not set
        questClickHandle({_p}, {_questId})
        return true

    return false

local function questClickHandle(p: player, questId: string):
    set {_status} to getQuestStatusFromId({_p}, {_questId})
    exit if {_status} is not set
    if {_status} is "has":
        questOrder({_p}, {_questId})
    if {_status} is "complete":
        questRewards({_p}, {_questId})
    renderQuests({_p})


function questAssignHandler():
    run 0 ticks later repeating every second:
        #ログインプレイヤーのデイリークエスト自動割り当て
        set {_dailyAssignMax} to getDefine("QUEST_DAILY_ASSIGN_MAX")
        set {_quests::*} to getDefineList("QUESTS") where [isQuestDaily(input) is true]
        loop all players:
            set {_assignedAmount} to getAssignedAmount(loop-player, 1)
            while {_assignedAmount} < {_dailyAssignMax}:
                exit loop if size of {_quests::*} <= {_assignedAmount}
                exit loop if questAssign(loop-player, 1) is false
        #存在しないクエストの自動修正
        loop all players:
            remove {quest.has::%loop-player's uuid%::*} where [{_quests::*} doesn't contain input] from {quest.has::%loop-player's uuid%::*}
            remove {quest.ordering::%loop-player's uuid%::*} where [{_quests::*} doesn't contain input] from {quest.ordering::%loop-player's uuid%::*}
            remove {quest.complete::%loop-player's uuid%::*} where [{_quests::*} doesn't contain input] from {quest.complete::%loop-player's uuid%::*}
            remove {quest.rewarded::%loop-player's uuid%::*} where [{_quests::*} doesn't contain input] from {quest.rewarded::%loop-player's uuid%::*}

local function questAssign(p: player, questType: integer) :: boolean:
    if {_questType} is 1:
        set {_quests::*} to getDefineList("QUESTS") where [isQuestDaily(input) is true]
        set {_random} to random element out of ({_quests::*} where [{quest.has::%{_p}'s uuid%::*} doesn't contain input])
        return false if {_random} is not set
        add {_random} to {quest.has::%{_p}'s uuid%::*}
        logInfo("QUEST_ASSIGNED", getQuestLogParameters({_p}'s uuid, {_random}))
        return true
    return false

local function renderQuests(p: player):
    set {_invName} to name of {_p}'s current inventory
    exit if {_invName} is not {@MAIN_TITLE_NAME}

    #Calculate Daily Slots
    set {_baseSlot} to 11
    loop 5 times:
        add {_baseSlot} + (loop-number - 1) to {_dailySlots::*}
    set {_baseSlot} to 20
    loop 5 times:
        add {_baseSlot} + (loop-number - 1) to {_dailySlots::*}
    #Calculate Weekly Slots
    set {_baseSlot} to 38
    loop 5 times:
        add {_baseSlot} + (loop-number - 1) to {_weeklySlots::*}
    
    #Replace Slots to Air
    loop {_dailySlots::*}:
        set slot loop-value of {_p}'s current inventory to air
    loop {_weeklySlots::*}:
        set slot loop-value of {_p}'s current inventory to air
    
    #Render Quests
    set {_currentDailySlotIndex} to 1
    #未受注（Has）
    loop {quest.has::%{_p}'s uuid%::*}:
        set {_item} to getBaseQuestDisplayItem(loop-value, getBannerPatternItemsFromModulo({_currentDailySlotIndex}))
        #Lores
        add "&r" to lore of {_item}
        add "&cℹ 受注していません" to lore of {_item}
        add "&e» クリックして受注する «" to lore of {_item}

        set slot {_dailySlots::%{_currentDailySlotIndex}%} of {_p}'s current inventory to {_item}
        add 1 to {_currentDailySlotIndex}
    #進行中（Ordering）
    loop {quest.ordering::%{_p}'s uuid%::*}:
        set {_completeTrigger} to getDefine("QUEST_COMPLETE_TRIGGER::%loop-value%")
        set {_currentTrigger} to getTrigger({_p}, loop-value)
        set {_item} to getBaseQuestDisplayItem(loop-value, getBannerPatternItemsFromModulo({_currentDailySlotIndex}))
        #Lores
        add "&r" to lore of {_item}
        add "&7(&3%{_currentTrigger}%&7/%{_completeTrigger}%&7)" to lore of {_item}
        add "&eℹ クエストが進行中です" to lore of {_item}

        set slot {_dailySlots::%{_currentDailySlotIndex}%} of {_p}'s current inventory to Glowing({_item})
        add 1 to {_currentDailySlotIndex}
    #完了済み（Complete）
    loop {quest.complete::%{_p}'s uuid%::*}:
        set {_item} to getBaseQuestDisplayItem(loop-value, experience bottle)
        #Lores
        add "&r" to lore of {_item}
        add "&aℹ クエストが達成済みです" to lore of {_item}
        add "&e» クリックして報酬を受け取る «" to lore of {_item}

        set slot {_dailySlots::%{_currentDailySlotIndex}%} of {_p}'s current inventory to {_item}
        add 1 to {_currentDailySlotIndex}
    #報酬受け取り済み（Rewarded）
    loop {quest.rewarded::%{_p}'s uuid%::*}:
        set {_item} to getBaseQuestDisplayItem(loop-value, gunpowder)
        #Lores
        add "&r" to lore of {_item}
        add "&cℹ 報酬を受け取り済みです" to lore of {_item}

        set slot {_dailySlots::%{_currentDailySlotIndex}%} of {_p}'s current inventory to {_item}
        add 1 to {_currentDailySlotIndex}

local function getBaseQuestDisplayItem(questId: string, baseItem: item) :: item:
    set {_questTitle} to getDefine("QUEST_TITLE::%{_questId}%")
    set {_itemName} to "&b%{_questTitle}%"
    set {_lores::*} to "&3» 報酬" and getRewardLores({_questId})
    set {_item} to {_baseItem} named {_itemName} with lore {_lores::*}
    set string tag "TheMining;quest;id" of custom nbt of {_item} to {_questId}
    return {_item}

local function getRewardLores(questId: string) :: objects:
    set {_exp} to getDefine("QUEST_REWARD::%{_questId}%::EXP")
    set {_money} to getDefine("QUEST_REWARD::%{_questId}%::MONEY")
    add "&b 🔨 &3%formatNumber({_exp})% EXP" to {_results::*} if {_exp} is set
    add "&e 💰 &6%formatNumber({_money})% 円" to {_results::*} if {_money} is set
    return {_results::*}

#数字からバナーパターンの種類を一意に決定する関数
#（クエスト内容が更新されない限りは、同じバナー模様を使用したいため）
local function getBannerPatternItemsFromModulo(digest: integer) :: item:
    set {_patterns::*} to getAllBannerPatternItems()
    set {_hash} to mod({_digest}, size of {_patterns::*})

    #モジュロ演算の結果の範囲は 0 <= mod(digest, patternSize) < patternSize
    #インデックス番号は1 < index <= patternSize であるため+1をしてインデックスに使用する
    set {_index} to {_hash} + 1

    return {_patterns::%{_index}%}

local function getAssignedAmount(p: player, questType: integer) :: integer:
    set {_result} to 0
    if {_questType} is 1:
        add size of ({quest.has::%{_p}'s uuid%::*} where [isQuestDaily(input) is true]) to {_result}
        add size of ({quest.ordering::%{_p}'s uuid%::*} where [isQuestDaily(input) is true]) to {_result}
        add size of ({quest.complete::%{_p}'s uuid%::*} where [isQuestDaily(input) is true]) to {_result}
        add size of ({quest.rewarded::%{_p}'s uuid%::*} where [isQuestDaily(input) is true]) to {_result}
    else if {_questType} is 2:
        add size of ({quest.has::%{_p}'s uuid%::*} where [isQuestWeekly(input) is true]) to {_result}
        add size of ({quest.ordering::%{_p}'s uuid%::*} where [isQuestWeekly(input) is true]) to {_result}
        add size of ({quest.complete::%{_p}'s uuid%::*} where [isQuestWeekly(input) is true]) to {_result}
        add size of ({quest.rewarded::%{_p}'s uuid%::*} where [isQuestWeekly(input) is true]) to {_result}
    return {_result}

local function getTrigger(p: player, questId: string) :: integer:
    set {_trigger} to {quest.triggers::%{_p}'s uuid%::%{_questId}%}
    return 0 if {_trigger} is not set
    return {_trigger}

function questTriggerIncreaseHandle(p: player, questId: string, increaseValue: integer = 1):
    exit if isQuestCompletable({_p}, {_questId}) is false
    
    set {_after} to getTrigger({_p}, {_questId}) + {_increaseValue}
    set {_maxTrigger} to getDefine("QUEST_COMPLETE_TRIGGER::%{_questId}%")
    if {_after} >= {_maxTrigger}:
        #完了処理
        set {quest.triggers::%{_p}'s uuid%::%{_questId}%} to {_maxTrigger}
        questComplete({_p}, {_questId}, true)
        questTriggerStatisticsCompleteInit({_p}, {_questId})
    else:
        #増加処理
        add {_increaseValue} to {quest.triggers::%{_p}'s uuid%::%{_questId}%}

local function questTriggerStatisticsOrderInit(p: player, questId: string):
    profileStatisticsSet({_p}, "_questTrigger_currentMoney", 0)

local function questTriggerStatisticsCompleteInit(p: player, questId: string):
    profileStatisticsClear({_p}, "_questTrigger_currentMoney")

local function getQuestIdFromItem(item: item) :: string:
    return string tag "TheMining;quest;id" of custom nbt of {_item}

local function isQuestDaily(questId: string) :: boolean:
    return true if getDefine("QUEST_TYPE::%{_questId}%") is 1
    return false

local function isQuestWeekly(questId: string) :: boolean:
    return true if getDefine("QUEST_TYPE::%{_questId}%") is 2
    return false

local function getQuestStatusFromId(p: player, questId: string) :: string:
    return "has" if {quest.has::%{_p}'s uuid%::*} contains {_questId}
    return "ordering" if {quest.ordering::%{_p}'s uuid%::*} contains {_questId}
    return "complete" if {quest.complete::%{_p}'s uuid%::*} contains {_questId}
    return "rewarded" if {quest.rewarded::%{_p}'s uuid%::*} contains {_questId}

local function isQuestOrderable(p: player, questId: string) :: boolean:
    return false if {quest.has::%{_p}'s uuid%::*} doesn't contain {_questId}
    return false if {quest.ordering::%{_p}'s uuid%::*} contains {_questId}
    return false if {quest.complete::%{_p}'s uuid%::*} contains {_questId}
    return false if {quest.rewarded::%{_p}'s uuid%::*} contains {_questId}
    return true

local function isQuestCompletable(p: player, questId: string) :: boolean:
    return false if {quest.has::%{_p}'s uuid%::*} contains {_questId}
    return false if {quest.ordering::%{_p}'s uuid%::*} doesn't contain {_questId}
    return false if {quest.complete::%{_p}'s uuid%::*} contains {_questId}
    return false if {quest.rewarded::%{_p}'s uuid%::*} contains {_questId}
    return true

local function isQuestRewardable(p: player, questId: string) :: boolean:
    return false if {quest.has::%{_p}'s uuid%::*} contains {_questId}
    return false if {quest.ordering::%{_p}'s uuid%::*} contains {_questId}
    return false if {quest.complete::%{_p}'s uuid%::*} doesn't contain {_questId}
    return false if {quest.rewarded::%{_p}'s uuid%::*} contains {_questId}
    return true

function isQuestInProgress(p: player, questId: string) :: boolean:
    return false if {quest.ordering::%{_p}'s uuid%::*} doesn't contain {_questId}
    return true

local function questOrder(p: player, questId: string) :: boolean:
    if isQuestOrderable({_p}, {_questId}) is true:
        remove {_questId} from {quest.has::%{_p}'s uuid%::*}
        add {_questId} to {quest.ordering::%{_p}'s uuid%::*}
        logInfo("QUEST_ORDERED", getQuestLogParameters({_p}'s uuid, {_questId}))
        questTriggerStatisticsOrderInit({_p}, {_questId})
        return true

    logError("ERR_QUEST_ORDER", getQuestLogParameters({_p}'s uuid, {_questId}))
    return false

local function questComplete(p: player, questId: string, isSkipCondition: boolean = false) :: boolean:
    set {_flag} to false
    set {_flag} to true if {_isSkipCondition} is true
    set {_flag} to true if isQuestCompletable({_p}, {_questId}) is true

    if {_flag} is true:
        remove {_questId} from {quest.ordering::%{_p}'s uuid%::*}
        add {_questId} to {quest.complete::%{_p}'s uuid%::*}
        logInfo("QUEST_COMPLETE", getQuestLogParameters({_p}'s uuid, {_questId}))
        return true
        
    logError("ERR_QUEST_COMPLETE", getQuestLogParameters({_p}'s uuid, {_questId}))
    return false

local function questRewards(p: player, questId: string) :: boolean:
    if isQuestRewardable({_p}, {_questId}) is true:
        remove {_questId} from {quest.complete::%{_p}'s uuid%::*}
        add {_questId} to {quest.rewarded::%{_p}'s uuid%::*}
        #報酬の付与
        set {_exp} to getDefine("QUEST_REWARD::%{_questId}%::EXP")
        set {_money} to getDefine("QUEST_REWARD::%{_questId}%::MONEY")
        profileExpIncrease({_p}, {_exp}, "QUEST_REWARDS") if {_exp} is set
        profileMoneyIncrease({_p}, {_money}, "QUEST_REWARDS") if {_money} is set
        logInfo("QUEST_RECEIVE_REWARDS", getQuestLogParameters({_p}'s uuid, {_questId}))
        return true

    logError("ERR_QUEST_RECEIVE_REWARDS", getQuestLogParameters({_p}'s uuid, {_questId}))
    return false

#Interface
local function getQuestLogParameters(uuid: string, questId: string) :: objects:
    add {_uuid} to {_res::*}
    add {_questId} to {_res::*}
    return {_res::*}
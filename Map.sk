#==================================================
#| #Map.sk
#| マップの実装・管理モジュール
#|
#| Nekozouneko Group Developer
#==================================================

#以下ポータルの実装
function teleportDestination(p: player, destiName: string) :: boolean:
    set {_location} to getDefine("LOCATION::%{_destiName}%")
    if isDestinationAvailable({_location}) is false:
        broadcast "DESTI ERROR: %{_destiName}% | %{_location}%"
        return false
    force teleport {_p} to {_location}
    return true

function isDestinationAvailable(desti: location) :: boolean:
    return false if {_desti} is not set
    return false if block at {_desti} is not set
    return false if block above {_desti} is not air
    return true

function portalStartTeleportation(p: player, portalName: string):
    set metadata value "isPortalTeleporting" of {_p} to true #Teleport Lock

    set {_waitingTick} to 20*3
    set {_tick} to 0
    set {_destiName} to getDefine("PORTAL_DESTINATION::%{_portalName}%")
    set {_originLocationX} to floor(x location of {_p})
    set {_originLocationY} to floor(y location of {_p})
    set {_originLocationZ} to floor(z location of {_p})
    set {_pos1} to getDefine("PORTAL::%{_portalName}%::1")
    set {_pos2} to getDefine("PORTAL::%{_portalName}%::2")

    while {_tick} <= {_waitingTick}:
        send action bar getDefine("LANG::PORTAL_TELEPORTING") to {_p}

        set {_cancelled} to true if {_originLocationX} is not floor(x location of {_p})
        set {_cancelled} to true if {_originLocationY} is not floor(y location of {_p})
        set {_cancelled} to true if {_originLocationZ} is not floor(z location of {_p})
        set {_cancelled} to false if isWithinLocation({_pos1}, {_pos2}, {_p}'s location) is true
        exit loop if {_cancelled} is true

        add 5 to {_tick}
        wait 5 tick

    if {_cancelled} is true:
        send action bar getDefine("LANG::PORTAL_CANCELLED") to {_p}
    else if teleportDestination({_p}, {_destiName}) is true:
        send action bar getDefine("LANG::PORTAL_TELEPORTED") to {_p}
    else:
        send action bar getDefine("LANG::ERROR_DESTINATION_NOT_AVAILABLE") to {_p}

    set metadata value "isPortalTeleporting" of {_p} to false #Teleport unLock

#ポータル範囲内かを定期検査するAsyncHandler
function portalConditionAsyncHandler():
    async run 0 ticks later repeating every second:
        set {_players::*} to all players where [metadata value "isPortalTeleporting" of input is false]
        loop getDefineList("PORTALS"):
            set {_pos1} to getDefine("PORTAL::%loop-value%::1")
            set {_pos2} to getDefine("PORTAL::%loop-value%::2")
            loop {_players::*} where [isWithinLocation({_pos1}, {_pos2}, input's location) is true]:
                portalStartTeleportation(loop-value-2, loop-value-1)

#以下ジャンプパッドの実装
function onJumpPadHandle(p: player, block: block):
    exit if block under {_block} is not gold block

    set {_speed} to 3
    set {_maxPitch} to 35
    set {_yaw} to {_p}'s yaw
    set {_pitch} to {_p}'s pitch

    set {_pitch} to abs({_pitch})
    set {_pitch} to {_maxPitch} if {_pitch} > {_maxPitch}

    set {_vector} to vector from yaw {_yaw} and pitch -1*{_pitch}
    push {_p} {_vector} at speed {_speed}
                
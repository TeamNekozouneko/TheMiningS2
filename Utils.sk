#==================================================
#| #Utils.sk
#| 数式関数や変換関数の実装モジュール
#|
#| Nekozouneko Group Developer
#==================================================

function String(value: object) :: string:
    return "%{_value}%"

function getLevelupCost(currentLevel: integer) :: number:
    set {_initial_term} to getDefine("LEVELUP_INITIAL_TERM")
    set {_common_ratio} to getDefine("LEVELUP_COMMON_RATIO")
    return {_initial_term} * {_common_ratio} ^ ({_currentLevel}-1)

#Numberの指定桁目を取得する関数
function getDigit(value: number, digit: integer) :: integer:
    set {_coefficient} to 10^({_digit}-1) #基準値
    return mod(abs(floor({_value}) / {_coefficient}), 10)

#Unixtimeの経過時間を返却する関数（秒）
function getElapsedUnixtime(unixtime: number) :: number:
    return 0 if {_unixtime} is not set
    set {_deltaTime} to (unix timestamp of now)-{_unixtime}
    return 0 if {_deltaTime} < 0
    return {_deltaTime}

#文章中の引数代入を行う関数
function substitution(content: string, args: string) :: string:
    replace first "${}" with {_args} in {_content}
    return {_content}

#ある地点がある2地点のロケーションの内側にあるかを調べる関数
#※<location> is within <location> and <location>は小数点を扱う位置だとバグりました。
function isWithinLocation(start: location, end: location, target: location) :: boolean:
    set {_startX} to x location of {_start}
    set {_startY} to y location of {_start}
    set {_startZ} to z location of {_start}
    set {_endX} to x location of {_end}
    set {_endY} to y location of {_end}
    set {_endZ} to z location of {_end}
    set {_targetX} to x location of {_target}
    set {_targetY} to y location of {_target}
    set {_targetZ} to Z location of {_target}

    set {_minX} to min({_startX}, {_endX})
    set {_minY} to min({_startY}, {_endY})
    set {_minZ} to min({_startZ}, {_endZ})
    set {_maxX} to max({_startX}, {_endX})
    set {_maxY} to max({_startY}, {_endY})
    set {_maxZ} to max({_startZ}, {_endZ})

    return false if {_minX} > {_targetX}
    return false if {_maxX} < {_targetX}
    return false if {_minY} > {_targetY}
    return false if {_maxY} < {_targetY}
    return false if {_minZ} > {_targetZ}
    return false if {_maxZ} < {_targetZ}
    return true

function Glowing(item: item) :: item:
    enchant {_item} with infinity 255
    set boolean tag "minecraft:enchantments;show_in_tooltip" of nbt of {_item} to false
    return {_item}

function isInventoryFreeSpaceAvailable(p: player) :: boolean:
    loop 36 times:
        return true if slot (loop-number)-1 of {_p}'s inventory is air
    return false

function getAllBannerPatternItems() :: objects:
    add skull banner pattern item to {_patterns::*}
    add flow banner pattern item to {_patterns::*}
    add guster banner pattern item to {_patterns::*}
    add piglin banner pattern item to {_patterns::*}
    add creeper banner pattern item to {_patterns::*}
    add mojang banner pattern item to {_patterns::*}
    add bricks banner pattern item to {_patterns::*}
    add flower banner pattern item to {_patterns::*}
    add globe banner pattern item to {_patterns::*}
    return {_patterns::*}

function getObjects(obj: object) :: objects:
    add {_obj} to {_obj::*}
    return {_obj::*}
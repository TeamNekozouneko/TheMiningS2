#==================================================
#| #Items.sk
#| アイテムの実装・管理モジュール
#|
#| Nekozouneko Group Developer
#==================================================

function getItemData(itemId: string) :: itemtype:
    return getDefine("ITEMS::%{_itemId}%")

function getItemName(itemId: string) :: string:
    return name of getItemData({_itemId})

function getItemLore(itemId: string) :: objects:
    return lore of getItemData({_itemId})

function getItemId(itemData: itemtype) :: string:
    return string tag "TheMining;ItemId" of custom nbt of {_itemData}

function getItemIdFromDroppedItem(entity: entity) :: string:
    return string tag "Item;components;minecraft:custom_data;TheMining;ItemId" of nbt of {_entity}

function getEnchantedItemData(itemData: itemtype, enchantmentType: string, enchantmentLevel: integer) :: itemtype:
    set int tag "TheMining;Enchantments;%{_enchantmentType}%" of custom nbt of {_itemData} to {_enchantmentLevel}
    #バニラ準拠するエンチャントの反映
    set level of efficiency of {_itemData} to {_enchantmentLevel} if {_enchantmentType} is "efficiency"
    return {_itemData}

function toPickaxeFormat(itemData: itemtype) :: itemtype:
    #バニラのエンチャント表示を削除
    set boolean tag "minecraft:enchantments;show_in_tooltip" of nbt of {_itemData} to false

    #エンチャント表記の生成と反映
    loop getDefineList("ENCHANTMENT_TYPES"):
        set {_enchantmentLevel} to getItemEnchantmentLevel({_itemData}, loop-value)
        continue if {_enchantmentLevel} is 0
        set {_enchantmentName} to getDefine("LANG_ENCHANTMENTS::%loop-value%")
        add "&a　%{_enchantmentName}% %{_enchantmentLevel}%" to {_enchantmentLore::*}

        #エンチャント付与処理（効率強化）
        if loop-value is "efficiency":
            enchant {_itemData} with "efficiency %{_enchantmentLevel}%" parsed as enchantment type
    if size of {_enchantmentLore::*} > 0:
        add "&7エンチャント" to lore of {_itemData}
        add {_enchantmentLore::*} to lore of {_itemData}

    #採掘可能鉱石の表記の生成と反映
    set {_itemId} to getItemId({_itemData})
    loop getDefineList("BREAKABLE_ORES::%{_itemId}%"):
        set {_breakableOreName} to getDefine("LANG_ITEMS::%loop-value%")
        add "&a　%{_breakableOreName}%" to {_breakableOresLore::*}
    if size of {_breakableOresLore::*} > 0:
        add "&7採掘できる鉱石" to lore of {_itemData}
        add {_breakableOresLore::*} to lore of {_itemData}
    
    return {_itemData}

function reformatPickaxe(itemData: itemtype) :: itemtype:
    clear lore of {_itemData}
    set {_formatted} to toPickaxeFormat({_itemData})
    return {_formatted}
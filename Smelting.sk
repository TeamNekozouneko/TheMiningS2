#==================================================
#| #Smelting.sk
#| 製錬要件の実装・管理モジュール
#|
#| Nekozouneko Group Developer
#==================================================

#{smelting.savedInputItems::%<UUID>%::*}
#{smelting.savedOutputItems::%<UUID>%::*}
#上記の大域リスト変数は、例えば32個の鉄を保管する際、鉄というアイテム要素をそれぞれ32個リストに保管する
#（後述のsmeltingSmeltOnBackGroundHandler関数で、一つずつアイテムを処理するときに便利なため）

Options:
    MAIN_TITLE_NAME: "&d&l製錬 &8鉱石を焼く"
    MAIN_BACKGROUND_ICON: gray stained glass pane named "&r"

    MAIN_INPUT_INFO_ICON: Glowing(furnace named "&a製錬のやり方" with lore "&7この下に鉱石を入れると、" and "&7入れた鉱石を焼くことができます。" and "&eメニューを閉じても裏で焼いてくれるよ！" and "&r" and "&f現在の製錬スピード：&b1個/秒")
    MAIN_OUTPUT_INFO_ICON: chest named "&a製錬後のアイテム" with lore "&7製錬されたアイテムは、" and "&7この下に焼かれて出てきます。"

    MAIN_FIRE_LEVEL_1_ICON: yellow stained glass pane named "&r"
    MAIN_FIRE_LEVEL_2_ICON: orange stained glass pane named "&r"
    MAIN_FIRE_LEVEL_3_ICON: red stained glass pane named "&r"

function smeltingGuiHandle(p: player):
    openGui({_p}, "SMELTING_MAIN")

# enum guiType {
#  SMELTING_MAIN
# }
local function openGui(p: player, guiType: string):
    #SMELTING_MAIN
    if {_guiType} is "SMELTING_MAIN":
        open chest inventory with 6 row named {@MAIN_TITLE_NAME} to {_p}
        set {_backGroundSlots::*} to getBackGroundSlots()
        loop {_backGroundSlots::*}:
            set slot loop-value of {_p}'s current inventory to {@MAIN_BACKGROUND_ICON}
        
        set slot 4 of {_p}'s current inventory to {@MAIN_INPUT_INFO_ICON}
        set slot 22 of {_p}'s current inventory to {@MAIN_OUTPUT_INFO_ICON}
        
        set {_baseSlot} to 10
        loop (first 7 elements of getStackedItem({smelting.savedInputItems::%{_p}'s uuid%::*})):
            set slot {_baseSlot}+(loop-iteration)-1 of {_p}'s current inventory to loop-value

        set {_baseSlot} to 28
        loop (first 7 elements of getStackedItem({smelting.savedOutputItems::%{_p}'s uuid%::*})):
            set slot {_baseSlot}+(loop-iteration)-1 of {_p}'s current inventory to loop-value
        set {_baseSlot} to 37
        loop (elements from 8 to 15 of getStackedItem({smelting.savedOutputItems::%{_p}'s uuid%::*})):
            set slot {_baseSlot}+(loop-iteration)-1 of {_p}'s current inventory to loop-value

        clear {smelting.savedInputItems::%{_p}'s uuid%::*}
        clear {smelting.savedOutputItems::%{_p}'s uuid%::*}

function onInventoryClickSmeltingHandle(p: player, item: itemtype) :: boolean:
    set {_invName} to name of {_p}'s current inventory
    #SMELTING_MAIN
    if {_invName} is {@MAIN_TITLE_NAME}:
        return true if {_item} is {@MAIN_BACKGROUND_ICON}
        return true if {_item} is {@MAIN_INPUT_INFO_ICON}
        return true if {_item} is {@MAIN_OUTPUT_INFO_ICON}
    return false

function smeltingSmeltOnGuiHandler():
    set {_baseSlot} to 28
    loop 7 times:
        add {_baseSlot}+(loop-number)-1 to {_outputSlots::*}
    set {_baseSlot} to 37
    loop 7 times:
        add {_baseSlot}+(loop-number)-1 to {_outputSlots::*}

    run 0 ticks later repeating every second:
        loop all players where [name of input's current inventory is {@MAIN_TITLE_NAME}]:
            #製錬候補の算出
            set {_baseSlot} to 10
            loop 7 times:
                set {_slot} to {_baseSlot}+(loop-number)-1
                set {_item} to slot {_slot} of loop-player's current inventory
                set {_itemId} to getItemId({_item})
                set {_smelledItem} to getDefine("SMELTING_ITEM::%{_itemId}%")
                exit 1 loop if {_smelledItem} is set
            continue if {_smelledItem} is not set

            #条件確認
            #{_isSmeltable} = 製錬後アイテムスロットの空き、もしくは重ねることで精錬できる条件かどうか
            #{_stackableSlot} = 同じアイテムが製錬後アイテムスロットに存在していて、追加で重ねることができるスロット番号
            #{_availableSlot} = 製錬後アイテムスロットの空きスロット番号
            set {_isSmeltable} to false
            clear {_stackableSlot}
            clear {_availableSlot}
            loop {_outputSlots::*}:
                set {_item} to slot (loop-value-2) of loop-player's current inventory
                set {_itemId} to getItemId({_item})

                if {_itemId} is {_smelledItem}:
                    if item amount of {_item} < 64:
                        set {_stackableSlot} to loop-value-2 if {_stackableSlot} is not set
                        set {_isSmeltable} to true
                
                if {_item} is air:
                    set {_availableSlot} to loop-value-2 if {_availableSlot} is not set
                    set {_isSmeltable} to true
            
            continue if {_isSmeltable} is false

            #製錬処理
            remove 1 from item amount of (slot {_slot} of loop-player's current inventory)
            if {_stackableSlot} is set:
                add 1 to item amount of (slot {_stackableSlot} of loop-player's current inventory)
            else:
                set slot {_availableSlot} of loop-player's current inventory to getItemData({_smelledItem})

function smeltingSmeltOnBackGroundHandler():
    run 0 ticks later repeating every second:
        loop all players:
            #製錬候補の算出
            loop {smelting.savedInputItems::%loop-player's uuid%::*}:
                set {_itemId} to getItemId(loop-value-2)
                set {_smelledItem} to getDefine("SMELTING_ITEM::%{_itemId}%")
                exit 1 loop if {_smelledItem} is set
            continue if {_smelledItem} is not set
            #製錬処理
            remove getItemData({_itemId}) from {smelting.savedInputItems::%loop-player's uuid%::*}
            add getItemData({_smelledItem}) to {smelting.savedOutputItems::%loop-player's uuid%::*}

function onInventoryCloseSmeltingHandle(p: player):
    exit if name of {_p}'s current inventory is not {@MAIN_TITLE_NAME}
    set {_inputSlots::*} to getInputInterfaceSlots()
    loop {_inputSlots::*}:
        set {_item} to slot loop-value of {_p}'s current inventory
        continue if {_item} is air
        loop (item amount of {_item}) times:
            add 1 of {_item} to {smelting.savedInputItems::%{_p}'s uuid%::*}
    set {_outputSlots::*} to getOutputInterfaceSlots()
    loop {_outputSlots::*}:
        set {_item} to slot loop-value of {_p}'s current inventory
        continue if {_item} is air
        loop (item amount of {_item}) times:
            add 1 of {_item} to {smelting.savedOutputItems::%{_p}'s uuid%::*}


local function getBackGroundSlots() :: objects:
    loop 6*9 times:
        add (loop-number)-1 to {_slots::*}
    remove 4 from {_slots::*}
    remove 22 from {_slots::*}

    remove getInputInterfaceSlots() from {_slots::*}
    remove getOutputInterfaceSlots() from {_slots::*}

    return {_slots::*}

local function getInputInterfaceSlots() :: objects:
    set {_baseSlot} to 10
    loop 7 times:
        add {_baseSlot}+(loop-number)-1 to {_slots::*}
    return {_slots::*}

local function getOutputInterfaceSlots() :: objects:
    set {_baseSlot} to 28
    loop 7 times:
        add {_baseSlot}+(loop-number)-1 to {_slots::*}
    set {_baseSlot} to 37
    loop 7 times:
        add {_baseSlot}+(loop-number)-1 to {_slots::*}
    return {_slots::*}

local function getStackedItem(items: objects) :: objects:
    while size of {_items::*} > 0:
        set {_first} to first element of {_items::*}
        set {_amount} to size of {_items::*} where [input is {_first}]

        #スタックした時の使用スロット数は{_amount}を64で割った余り+1になる
        loop mod({_amount}, 64)+1 times:
            if {_amount} > 64:
                add 64 of {_first} to {_results::*}
            else:
                add {_amount} of {_first} to {_results::*}
            remove 64 from {_amount}
        remove all {_first} from {_items::*}
    return {_results::*}
#==================================================
#| #Enchantment.sk
#| エンチャント台の実装・管理モジュール
#|
#| Nekozouneko Group Developer
#==================================================

Options:
    MAIN_TITLE_NAME: "&6&lエンチャント"

    #ENCHANTMENT_MAIN
    MAIN_INFO_ICON: Glowing(beacon named "&aエンチャントのやり方" with lore "&7この下にピッケルを入れて、" and "&7付けたいエンチャントを押してね。" and "&f※EXPを消費します！")
    MAIN_BACKGROUND_ICON: gray stained glass pane named "&r"
    MAIN_CANNOT_ENCHANT_ICON: red stained glass pane named "&cこのアイテムはエンチャントできません！" with lore "&7付けたいエンチャントを押してね。"
    MAIN_CAN_ENCHANT_ICON: green stained glass pane named "&aエンチャントできるアイテムです！" with lore "&7付けたいエンチャントを押してね。"
    MAIN_FIRST_PUT_PICKAXE: barrier named "&cまずはピッケルを入れてください！"

function onRightClickEnchantmentHandle(p: player, b: block) :: boolean:
    set {_blockX} to floor(x location of {_b})
    set {_blockY} to floor(y location of {_b})
    set {_blockZ} to floor(z location of {_b})
    set {_isContain} to false
    loop getDefineList("ENCHANTMENT::TABLE_LOCATION"):
        set {_x} to floor(x location of loop-value)
        set {_y} to floor(y location of loop-value)
        set {_z} to floor(z location of loop-value)
        continue if {_x} is not {_blockX}
        continue if {_y} is not {_blockY}
        continue if {_z} is not {_blockZ}
        set {_isContain} to true
        exit loop
    return false if {_isContain} is false
    openGui({_p}, "ENCHANTMENT_MAIN")
    return true

#enum guiType {
# ENCHANTMENT_MAIN
#}
local function openGui(p: player, guiType: string):
    if {_guiType} is "ENCHANTMENT_MAIN":
        playSound(getObjects({_p}), "OpenEnchantmentTable")
        open chest inventory with 6 row named {@MAIN_TITLE_NAME} to {_p}
        loop 54 times:
            set slot (loop-number)-1 of {_p}'s current inventory to {@MAIN_BACKGROUND_ICON}
        set slot 4 of {_p}'s current inventory to {@MAIN_INFO_ICON}
        set slot 13 of {_p}'s current inventory to air #ピッケル投入口

        #過去のアイテムデータがある場合の処理
        if {enchantment.saveTableItem::%{_p}'s uuid%} is set:
            set slot 13 of {_p}'s current inventory to {enchantment.saveTableItem::%{_p}'s uuid%}
            clear {enchantment.saveTableItem::%{_p}'s uuid%}

        set {_types::*} to getDefineList("ENCHANTMENT_TYPES")
        set {_baseSlot} to 29
        loop 5 times:
            set slot {_baseSlot}+(loop-number)-1 of {_p}'s current inventory to {@MAIN_FIRST_PUT_PICKAXE} #エンチャントが表示されるところ

function onInventoryClickEnchantmentHandle(p: player, clickedItem: item) :: boolean:
    if name of {_p}'s current inventory is {@MAIN_TITLE_NAME}:
        if {_clickedItem} is set: #空気アイテムの除外
            if getItemId({_clickedItem}) is not set:
                set {_isCancelled} to true

        if {_isCancelled} is true:
            set {_item} to slot 13 of {_p}'s current inventory
            giveEnchantmentProcessHandle({_p}, {_clickedItem}, {_item})
        
        return true if {_isCancelled} is true
    return false

local function giveEnchantmentProcessHandle(p: player, clickedItem: item, item: item):
    #Logical Condition Check
    exit if name of {_p}'s current inventory is not {@MAIN_TITLE_NAME}

    set {_enchantment} to string tag "TheMining;EnchantmentType" of custom nbt of {_clickedItem}
    set {_itemId} to getItemId({_item})
    exit if {_enchantment} is not set
    exit if {_itemId} is not set

    set {_currentEnchantmentLevel} to getItemEnchantmentLevel({_item}, {_enchantment})
    set {_initialTerm} to getDefine("ENCHANTMENT::INITIAL_TERM::%{_enchantment}%")
    set {_commonRatio} to getDefine("ENCHANTMENT::COMMON_RATIO::%{_enchantment}%")
    set {_currentCost} to getEqualRatio({_currentEnchantmentLevel}, {_initialTerm}, {_commonRatio})
    exit if {_currentCost} > profileExpGet({_p})

    set {_maxLevel} to getDefine("ENCHANTMENT::MAX_LEVEL::%{_enchantment}%")
    exit if {_currentEnchantmentLevel} >= {_maxLevel}

    #Enchantment Process
    set {_enchantedItem} to reformatPickaxe(getEnchantedItemData({_item}, {_enchantment}, {_currentEnchantmentLevel}+1))
    set slot 13 of {_p}'s current inventory to {_enchantedItem}

    profileExpDecrease({_p}, {_currentCost}, "ENCHANTMENT")
    logInfo("ENCHANT_GIVE", getEnchantmentLogParameters({_p}'s uuid, {_itemId}, {_enchantment}, {_currentEnchantmentLevel}+1))
    send getDefine("LANG::SUCCESS_ENCHANTMENT") to {_p}
    playSound(getObjects({_p}), "UseEnchantmentTable")

    #クエスト ENCHANT_PICKAXE_ONCE
    questTriggerIncreaseHandle({_p}, "ENCHANT_PICKAXE_ONCE")
    #ガイド ENCHANT_PICKAXE
    guideTriggerIncreaseHandle({_p}, "ENCHANT_PICKAXE")

#レンダリング
function enchantmentGuiAsyncHandler():
    async run 0 ticks later repeating every 5 tick:
        loop all players where [name of input's current inventory is {@MAIN_TITLE_NAME}]:
            set {_item} to slot 13 of loop-player's current inventory
            set {_itemId} to getItemId({_item})
            set {_isEnchantable} to false
            set {_isEnchantable} to true if getDefineList("ENCHANTMENT::ENCHANTABLE_ITEMS") contains {_itemId}
            set {_booksInitialize} to false
            
            #ステータス描写
            set {_baseSlot} to 9
            loop 9 times:
                set {_slot} to {_baseSlot}+(loop-number)-1
                {_slot} is not 13 #ピッケル投入口のスロット除外

                if {_item} is air:
                    set slot {_slot} of loop-player's current inventory to {@MAIN_BACKGROUND_ICON}
                    set {_booksInitialize} to true
                else if {_isEnchantable} is false:
                    set slot {_slot} of loop-player's current inventory to {@MAIN_CANNOT_ENCHANT_ICON}
                    set {_booksInitialize} to true
                else:
                    set slot {_slot} of loop-player's current inventory to {@MAIN_CAN_ENCHANT_ICON}
        
            #エンチャント本部分の初期化
            if {_booksInitialize} is true:
                set {_baseSlot} to 29
                loop 5 times:
                    set {_slot} to {_baseSlot}+(loop-number)-1
                    slot {_slot} of loop-player's current inventory is not {@MAIN_FIRST_PUT_PICKAXE}
                    set slot {_slot} of loop-player's current inventory to {@MAIN_FIRST_PUT_PICKAXE}
            
            #エンチャント本描写
            continue if {_item} is air
            continue if {_isEnchantable} is false

            set {_currentExp} to profileExpGet(loop-player)
            set {_enchantments::*} to getDefineList("ENCHANTMENT_TYPES")
            set {_baseSlot} to 29
            loop (size of {_enchantments::*}) times:
                set {_enchantment} to {_enchantments::%loop-number%}
                set {_langEnchantment} to getDefine("LANG_ENCHANTMENTS::%{_enchantment}%")
                set {_currentEnchantmentLevel} to getItemEnchantmentLevel({_item}, {_enchantment})
                set {_currentEnchantmentLevel} to 0 if {_currentEnchantmentLevel} is not set
                set {_initialTerm} to getDefine("ENCHANTMENT::INITIAL_TERM::%{_enchantment}%")
                set {_commonRatio} to getDefine("ENCHANTMENT::COMMON_RATIO::%{_enchantment}%")
                set {_currentCost} to getEqualRatio({_currentEnchantmentLevel}, {_initialTerm}, {_commonRatio})
                set {_maxLevel} to getDefine("ENCHANTMENT::MAX_LEVEL::%{_enchantment}%")
                set {_slot} to {_baseSlot}+(loop-number)-1

                #コストが足りているかの判定
                set {_isCostEnough} to false
                set {_isCostEnough} to true if {_currentCost} <= {_currentExp}

                clear {_iconLores::*} #次のイテレータ用の初期化
                set {_iconName} to "&6%{_langEnchantment}% &eLv.%{_currentEnchantmentLevel}+1%"
                
                if {_isCostEnough} is true:
                    add "&aエンチャント可能" to {_iconLores::*}
                    set {_icon} to enchanted book
                else:
                    add "&cエンチャント不可能" to {_iconLores::*}
                    add "&7EXPが足りていません！" to {_iconLores::*}
                    set {_icon} to book

                add "&r" to {_iconLores::*}
                add "&f必要EXP&7: &b%{_currentCost}% EXP" to {_iconLores::*}

                #最大レベルの時は表記を上書きする
                if {_currentEnchantmentLevel} >= {_maxLevel}:
                    clear {_iconLores::*}
                    set {_iconName} to "&6%{_langEnchantment}% &eLv.&e最大"
                    add "&c最大レベルです！" to {_iconLores::*}
                    set {_icon} to book

                #アイテムの設置
                set {_bookIcon} to {_icon} named {_iconName} with lore {_iconLores::*}
                set string tag "TheMining;EnchantmentType" of custom nbt of {_bookIcon} to {_enchantment}
                set slot {_slot} of loop-player's current inventory to {_bookIcon}

#アイテムが入った状態でインベントリーが閉じられた時の処理
#| インベントリに空きスロットがある場合 → give
#| インベントリに空きスロットがない場合 → 変数保管しておいてテーブル内に残す
function onInventoryCloseEnchantmentHandle(p: player):
    exit if name of {_p}'s current inventory is not {@MAIN_TITLE_NAME}
    set {_item} to slot 13 of {_p}'s current inventory
    if isInventoryFreeSpaceAvailable({_p}) is true:
        give {_item} to {_p}
    else:
        set {enchantment.saveTableItem::%{_p}'s uuid%} to {_item}

local function getEqualRatio(n: number, initialTerm: number, commonRatio: number) :: number:
    return ceil({_initialTerm} * {_commonRatio} ^ {_n})

function getItemEnchantmentLevel(itemData: item, enchantmentName: string) :: integer:
    set {_level} to int tag "TheMining;Enchantments;%{_enchantmentName}%" of custom nbt of {_itemData}
    return {_level}

function getItemEnchantments(itemData: item) :: objects:
    return compound list tag "TheMining;Enchantments" of custom nbt of {_itemData}

#Interface
local function getEnchantmentLogParameters(uuid: string, itemId: string, enchantmentName: string, enchantmentLevel: number) :: objects:
    add {_uuid} to {_res::*}
    add {_itemId} to {_res::*}
    add {_enchantmentName} to {_res::*}
    add String({_enchantmentLevel}) to {_res::*}
    return {_res::*}
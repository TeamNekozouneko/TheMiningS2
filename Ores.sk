#==================================================
#| #Ores.sk
#| 鉱石の実装・管理モジュール
#|
#| Nekozouneko Group Developer
#==================================================
function breakHandle(player: player, block: block) :: boolean:
    set {_itemId} to getItemId({_player}'s tool)
    set {_blockType} to type of {_block}
    set {_blockLocation} to location of {_block}
    return false if {_itemId} is not set
    return false if getDefineList("BREAKABLE_ORES::%{_itemId}%") doesn't contain {_blockType}

    run 0 ticks later:
        #ドロップの処理
        set {_dropItem} to getDefine("DROP_ITEMS::%{_blockType}%")
        drop {_dropItem} at {_blockLocation}

        #EXPの獲得処理
        profileExpIncrease({_player}, getDefine("EARN_EXP::%{_blockType}%"), "ORES_BREAK")

        #鉱石復活のキュー追加
        set {_unixtime} to floor(unix timestamp of now) #Unixtimeの整数部だけ扱う
        set {_roundedUnixtime} to {_unixtime} - mod({_unixtime}, 10) #一桁目の数字だけ引いて一桁目の情報を0にそろえる
        set {_queueId} to random integer between 1000000000 and 9999999999
        add {_queueId} to {ores.revivePendingQueues::*}
        set {ores.revivePendingSpans::%{_queueId}%} to {_roundedUnixtime}
        set {ores.revivePendingLocations::%{_queueId}%} to {_blockLocation}
        set {ores.revivePendingBlocks::%{_queueId}%} to {_blockType}

    return true

#鉱石復活の定期処理
function oreReviveAsyncHandler():
    run 0 ticks later repeating every 5 tick:
        copy {ores.revivePendingQueues::*} to {_queues::*}
        send action bar "%size of {_queues::*}% | %size of {ores.revivePendingSpans::*}% %size of {ores.revivePendingLocations::*}% %size of {ores.revivePendingBlocks::*}%" to all players
        loop getDefine("REVIVE_ORE_PER_INTERVAL") times:
            exit loop if size of {_queues::*} <= 0

            set {_revivePendingQueue} to the first element of {_queues::*}
            set {_revivePendingSpan} to {ores.revivePendingSpans::%{_revivePendingQueue}%}
            set {_revivePendingBlock} to {ores.revivePendingBlocks::%{_revivePendingQueue}%}
            set {_revivePendingLocation} to {ores.revivePendingLocations::%{_revivePendingQueue}%}

            set {_reviveTimePendingBlock} to getDefine("REVIVE_TIME::%{_revivePendingBlock}%")
            continue if {_reviveTimePendingBlock} is not set
            continue if getElapsedUnixtime({_revivePendingSpan}) < {_reviveTimePendingBlock}

            set block at {_revivePendingLocation} to {_revivePendingBlock}

            clear {ores.revivePendingSpans::%{_revivePendingQueue}%}
            clear {ores.revivePendingBlocks::%{_revivePendingQueue}%}
            clear {ores.revivePendingLocations::%{_revivePendingQueue}%}
            remove {_revivePendingQueue} from {_queues::*}
            remove {_revivePendingQueue} from {ores.revivePendingQueues::*}
#==================================================
#| #Ores.sk
#| 鉱石の実装・管理モジュール
#|
#| Nekozouneko Group Developer
#==================================================

Options:
    DO_NOT_REVIVE_AROUND_BLOCKS: 3
    CANNOT_BREAK_LESS_THAN_SUNLIGHT: 10

# function onBreakOresSingleHandle(p: player, block: block) :: boolean:
#     set {_item} to {_p}'s tool
#     set {_itemId} to getItemId({_item})
#     set {_blockType} to type of {_block}
#     set {_blockLocation} to location of {_block}

#     return false if {_itemId} is not set
#     return false if getDefineList("BREAKABLE_ORES::%{_itemId}%") doesn't contain {_blockType}
#     set {_dropItem} to getDefine("DROP_ITEMS::%{_blockType}%")

#     #地表チェック
#     # if block above {_block} is not air:
#     #     send action bar getDefine("LANG::ERROR_BREAK_FROM_SURFACE") to {_p}
#     #     return false

#     set {_fortuneLevel} to getItemEnchantmentLevel({_item}, "fortune")
#     set {_autoCollectLevel} to getItemEnchantmentLevel({_item}, "auto_collect")
#     set {_autoSellLevel} to getItemEnchantmentLevel({_item}, "auto_sell")
#     set {_rangeMiningLevel} to getItemEnchantmentLevel({_item}, "range_mining")
    
#     #Range MiningレベルがあればMultipleHandleに飛ばす
#     if {_rangeMiningLevel} > 0:
#         return false if {ores.rangeMiningCooldown::%{_p}'s uuid%} is set
#         enchantmentRangeMiningHandle({_p}, {_block}, {_rangeMiningLevel})
#         return true

#     #エンチャントの処理
#     #| Fortune
#     set {_dropItem} to enchantmentFortuneDropItemHandle({_dropItem}, {_fortuneLevel})
#     #| AutoSell
#     set {_isAutoSold} to true if enchantmentAutoSellSingleHandle({_p}, {_dropItem}, {_autoSellLevel}) is true
#     #| AutoCollect
#     if {_isAutoSold} is not true:
#         set {_isDropCancelled} to true if enchantmentAutoCollectSingleHandle({_p}, {_dropItem}, {_autoCollectLevel}) is true

#     #ドロップの処理
#     if {_isDropCancelled} is not true:
#         if {_isAutoSold} is not true:
#             drop {_dropItem} at {_blockLocation}

#     #EXPの獲得処理
#     profileExpIncrease({_p}, getDefine("EARN_EXP::%{_blockType}%"), "ORES_BREAK")

#     #Statistics
#     profileStatisticsIncrease({_p}, "mineQuantity", 1)

#     return true

# function onBreakOresMultipleHandle(p: player, originalBlocks: objects) :: objects: #return キャンセルするブロックリスト
#     set {_item} to {_p}'s tool
#     set {_itemId} to getItemId({_item})
#     exit if {_itemId} is not set

#     #それぞれの情報をリスト型でまとめる
#     loop {_originalBlocks::*}:
#         set {_blockType} to type of loop-value
#         if getDefineList("BREAKABLE_ORES::%{_itemId}%") doesn't contain {_blockType}:
#             add loop-value to {_cancelledBlock::*}
#             continue
#         # if block above loop-value is not air: #地表チェック
#         #     add loop-value to {_cancelledBlock::*}
#         #     continue

#         add loop-value to {_blocks::*}
#         add {_blockType} to {_blockTypes::*}
#         add getDefine("DROP_ITEMS::%{_blockType}%") to {_dropItems::*}
#         add getDefine("EARN_EXP::%{_blockType}%") to {_earnExp}
    
#     set {_fortuneLevel} to getItemEnchantmentLevel({_item}, "fortune")
#     set {_autoCollectLevel} to getItemEnchantmentLevel({_item}, "auto_collect")
#     set {_autoSellLevel} to getItemEnchantmentLevel({_item}, "auto_sell")
#     set {_rangeMiningLevel} to getItemEnchantmentLevel({_item}, "range_mining")
#     #エンチャントの処理
#     #| Fortune（1個のアイテムを入れて帰ってきた個数＝幸運の有効率）
#     set {_fortuneAmount} to item amount of enchantmentFortuneDropItemHandle(stone, {_fortuneLevel})
#     loop {_dropItems::*}:
#         set item amount of loop-value to (item amount of loop-value) * {_fortuneAmount}
#     #| AutoSell
#     set {_sellableItems::*} to enchantmentAutoSellMultipleHandle({_p}, {_dropItems::*}, {_autoSellLevel})
#     remove {_sellableItems::*} from {_dropItems::*}
#     #| AutoCollect
#     set {_isAutoCollected} to false
#     set {_isAutoCollected} to true if enchantmentAutoCollectMultipleHandle({_p}, {_dropItems::*}, {_autoCollectLevel}) is true

#     #ドロップの処理
#     if {_isAutoCollected} is false:
#         drop getMergedDropItems({_dropItems::*}) at location of (random element out of {_blocks::*})
    
#     #EXPの獲得処理
#     profileExpIncrease({_p}, {_earnExp}, "ORES_BREAK_MULTIPLE")

#     #Statistics
#     profileStatisticsIncrease({_p}, "mineQuantity", size of {_blocks::*})
    
#     clear {ores.rangeMiningCooldown::%{_p}'s uuid%}
#     return {_cancelledBlock::*}

function onBreakOreHandle(p: player, centerBlock: block) :: boolean:
    #初期化
    add {_centerBlock} to {_processBlocks::*}
    set {_tool} to {_p}'s tool
    return false if isOreBreakable({_tool}, {_centerBlock}) is false

    set {_fortuneLevel} to getItemEnchantmentLevel({_tool}, "fortune")
    set {_autoCollectLevel} to getItemEnchantmentLevel({_tool}, "auto_collect")
    set {_autoSellLevel} to getItemEnchantmentLevel({_tool}, "auto_sell")
    set {_rangeMiningLevel} to getItemEnchantmentLevel({_tool}, "range_mining")

    set {_processBlocks::*} to enchantmentRangeMiningHandle({_p}, {_tool}, {_centerBlock}, {_rangeMiningLevel})
    loop {_processBlocks::*}:
        set {_type} to type of loop-value
        add getDefine("DROP_ITEMS::%{_type}%") to {_dropItems::*}
        add getDefine("EARN_EXP::%{_type}%") to {_earnExp}
    
    #エンチャント効果の後処理
    #[Fortune]
    set {_fortuneMultiplier} to enchantmentGetFortuneMultiplier({_fortuneLevel})
    if {_fortuneMultiplier} != 1:
        loop {_dropItems::*}:
            set item amount of loop-value to (item amount of loop-value) * {_fortuneMultiplier}
    #[AutoSell]
    set {_soldItems::*} to enchantmentAutoSellHandle({_p}, {_dropItems::*}, {_autoSellLevel})
    remove {_soldItems::*} from {_dropItems::*}
    #[AutoCollect]
    set {_isAutoCollected} to enchantmentAutoCollectHandle({_p}, {_dropItems::*}, {_autoCollectLevel})

    #ブロック破壊処理
    update {_processBlocks::*} as air without neighbouring updates

    #ドロップ処理
    if {_isAutoCollected} is false:
        drop getMergedDropItems({_dropItems::*}) at location of {_centerBlock}
    
    #EXPの付与
    profileExpIncrease({_p}, {_earnExp}, "ORES_BREAK")

    #統計データの反映
    profileStatisticsIncrease({_p}, "mineQuantity", size of {_blocks::*})

    return true

function isOreBreakable(tool: item, block: block) :: boolean:
    set {_toolId} to getItemId({_tool})
    return false if {_toolId} is not set

    set {_type} to type of {_block}
    if getDefineList("BREAKABLE_ORES::%{_toolId}%") doesn't contain {_type}:
        return false
    return true

#鉱石復活の定期処理
function oreReviveAsyncHandler():
    run 0 ticks later repeating every getDefine("REVIVE_INTERVAL"):
        set {_players::*} to getAllPlayersInMine()
        #Revive Countdown
        playSound({_players::*} , "OreReviveStart")
        loop 30 times: #15秒分（30 * 10 tick）
            send action bar getDefine("LANG::ORES_REVIVE_1") to {_players::*}  if mod(loop-number, 2) != 0
            send action bar getDefine("LANG::ORES_REVIVE_2") to {_players::*}  if mod(loop-number, 2) = 0
            wait 10 tick

        #Revive Processing
        loop getDefineList("REVIVE_ORE_SCHEMATICS"):
            paste schematic loop-value at location(0, 0, 0, world "world", 0, 0)
        
        #Revive Processed
        playSound({_players::*} , "OreRevived")
        send action bar getDefine("LANG::ORES_REVIVED") to {_players::*}

local function getAroundAverageSunLight(location: location) :: number:
    loop all blocks in radius 1 around {_location}:
        add (sunlight level at loop-block) to {_sunlight::*} if loop-block is air
    return sum({_sunlight::*})/(size of {_sunlight::*})

local function getMergedDropItems(dropItems: objects) :: objects:
    loop {_dropItems::*}:
        loop (item amount of loop-value) times:
            add 1 of loop-value-1 to {_flatted::*}
    while size of {_flatted::*} > 0:
        set {_first} to first element of {_flatted::*}
        set {_amount} to size of {_flatted::*} where [input is {_first}]
        add {_amount} of {_first} to {_results::*}
        remove all {_first} from {_flatted::*}
    return {_results::*}